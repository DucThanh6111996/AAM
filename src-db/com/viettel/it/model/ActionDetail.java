package com.viettel.it.model;

// Generated Sep 8, 2016 5:07:30 PM by Hibernate Tools 4.0.0

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

import static javax.persistence.GenerationType.SEQUENCE;

/**
 * ActionDetail generated by hbm2java
 */
@Entity
@Table(name = "ACTION_DETAIL")
public class ActionDetail implements java.io.Serializable {

	private Long detailId;
	private Vendor vendor;
	private NodeType nodeType;
	private Action action;
	private String userName;
	private Long isActive;
	private List<ActionCommand> actionCommands = new ArrayList<ActionCommand>(0);
	private Version version;

    public ActionDetail() {
    }

//	public ActionDetail(Long detailId, Vendor vendor, NodeType nodeType, Action action, String userName, Long isActive) {
//		this.detailId = detailId;
//		this.vendor = vendor;
//		this.nodeType = nodeType;
//		this.action = action;
//		this.userName = userName;
//		this.isActive = isActive;
//	}
//
//	public ActionDetail(Long detailId, Vendor vendor, NodeType nodeType, Action action, String userName, Long isActive, List<ActionCommand> actionCommands) {
//		this.detailId = detailId;
//		this.vendor = vendor;
//		this.nodeType = nodeType;
//		this.action = action;
//		this.userName = userName;
//		this.isActive = isActive;
//		this.actionCommands = actionCommands;
//	}

	@Id
	@Column(name = "DETAIL_ID", unique = true, nullable = false, precision = 10, scale = 0)
	@GeneratedValue(strategy = SEQUENCE, generator = "generator")
    @SequenceGenerator(name = "generator", sequenceName = "ACTION_DETAIL_SEQ", allocationSize = 1)
	public Long getDetailId() {
		return this.detailId;
	}

    public void setDetailId(Long detailId) {
        this.detailId = detailId;
    }

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "VENDOR_ID", nullable = false)
	public Vendor getVendor() {
		return this.vendor;
	}

    public void setVendor(Vendor vendor) {
        this.vendor = vendor;
    }

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "NODE_TYPE_ID", nullable = false)
	public NodeType getNodeType() {
		return this.nodeType;
	}

    public void setNodeType(NodeType nodeType) {
        this.nodeType = nodeType;
    }

	@ManyToOne(fetch = FetchType.EAGER)
	@LazyCollection(LazyCollectionOption.EXTRA)
	@JoinColumn(name = "ACTION_ID", nullable = false)
	public Action getAction() {
		return this.action;
	}

    public void setAction(Action action) {
        this.action = action;
    }

    @Column(name = "USER_NAME", nullable = false, length = 200)
    public String getUserName() {
        return this.userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    @Column(name = "IS_ACTIVE", nullable = false, precision = 1, scale = 0)
    public Long getIsActive() {
        return this.isActive;
    }

    public void setIsActive(Long isActive) {
        this.isActive = isActive;
    }

 // hanhnv68 add 20160913
    @Fetch(FetchMode.SELECT)
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "actionDetail")
	@LazyCollection(LazyCollectionOption.EXTRA)
    @OrderBy("orderRun")
	public List<ActionCommand> getActionCommands() {
		return this.actionCommands;
	}

    public void setActionCommands(List<ActionCommand> actionCommands) {
        this.actionCommands = actionCommands;
    }

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((detailId == null) ? 0 : detailId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ActionDetail other = (ActionDetail) obj;
		if (detailId == null) {
			if (other.detailId != null)
				return false;
		} else if (!detailId.equals(other.detailId))
			return false;
		return true;
	}
	//end hanhnv68 add 20160913
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "VERSION_ID")
	public Version getVersion() {
		return this.version;
	}

	public void setVersion(Version version) {
		this.version = version;
	}

	/**
	 * @param paramValues
	 * @param isStyle
	 * @param actionOfFlow
	 * @return
	 * @author huynx6
	 * 
	 */
	public String buildCommand(List<ParamValue> paramValues, boolean isStyle, ActionOfFlow actionOfFlow){
		String commandLines= "";
		for (ActionCommand actionCommand : actionCommands) {
			String cmd = actionCommand.getCommandDetail().buildCommand(paramValues, isStyle, actionOfFlow);
			if(cmd!=null)
				commandLines += cmd+"<br />"+"\r\n";
		}
		return commandLines;
	}

	@Override
	public String toString() {
		return "ActionDetail{" +
				"detailId=" + detailId +
				", vendor=" + vendor.getVendorName() +
				", nodeType=" + nodeType.getTypeName() +
				", action=" + action.getName() +
				", userName='" + userName + '\'' +
				", isActive=" + isActive +
				", version=" + version.getVersionName() +
				'}';
	}
}