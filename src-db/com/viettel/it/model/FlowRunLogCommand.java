package com.viettel.it.model;

// Generated Sep 27, 2016 11:33:18 AM by Hibernate Tools 4.0.0

import com.viettel.it.persistence.FlowRunLogCommandServiceImpl;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

/**
 * FlowRunLogCommand generated by hbm2java
 */
@Entity
@Table(name = "FLOW_RUN_LOG_COMMAND")
public class FlowRunLogCommand implements java.io.Serializable {
	private static Logger logger = LogManager.getLogger(FlowRunLogCommand.class);

	private Long runLogCommandId;
	private Long runLogActionId;
	private Long nodeId;
    private CommandDetail commandDetail;
	private Long actionCommandId;
	private String cmdRun;
	private String result;
	private String resultDetail;
	private Long resultFinal;
	private Date finishTime;
	private Date insertTime;
	private Long orderRun;
	private Long cloneNumber;
        
    private String actionName;
    
    FlowRunLogAction flowRunLogAction;

	public FlowRunLogCommand() {
	}

    public FlowRunLogCommand(Long runLogCommandId, Long runLogActionId, Long nodeId, CommandDetail commandDetail, Long actionCommandId, String cmdRun) {
        this.runLogCommandId = runLogCommandId;
        this.runLogActionId = runLogActionId;
        this.nodeId = nodeId;
        this.commandDetail = commandDetail;
        this.actionCommandId = actionCommandId;
        this.cmdRun = cmdRun;
    }

    public FlowRunLogCommand(Long runLogCommandId, Long runLogActionId, Long nodeId, CommandDetail commandDetail, Long actionCommandId, String cmdRun, String result, String resultDetail, Long resultFinal,
                             Date finishTime, Date insertTime, Long orderRun) {
        this.runLogCommandId = runLogCommandId;
        this.runLogActionId = runLogActionId;
        this.nodeId = nodeId;
        this.commandDetail = commandDetail;
        this.actionCommandId = actionCommandId;
        this.cmdRun = cmdRun;
        this.result = result;
        this.resultDetail = resultDetail;
        this.resultFinal = resultFinal;
        this.finishTime = finishTime;
        this.insertTime = insertTime;
        this.orderRun = orderRun;
    }

        @Transient
        public String getActionName() {
            return actionName;
        }

        public void setActionName(String actionName) {
            this.actionName = actionName;
        }

	@Id
	@Column(name = "RUN_LOG_COMMAND_ID", unique = true, nullable = false, precision = 20, scale = 0)
	public Long getRunLogCommandId() {
		return this.runLogCommandId;
	}

	public void setRunLogCommandId(Long runLogCommandId) {
		this.runLogCommandId = runLogCommandId;
	}

	@Column(name = "RUN_LOG_ACTION_ID", nullable = false, precision = 20, scale = 0)
	public Long getRunLogActionId() {
		return this.runLogActionId;
	}

	public void setRunLogActionId(Long runLogActionId) {
		this.runLogActionId = runLogActionId;
	}

	@Column(name = "NODE_ID", nullable = false, precision = 20, scale = 0)
	public Long getNodeId() {
		return this.nodeId;
	}

	public void setNodeId(Long nodeId) {
		this.nodeId = nodeId;
	}


    @Fetch(FetchMode.SELECT)
    @ManyToOne(fetch = FetchType.EAGER)
    @LazyCollection(LazyCollectionOption.EXTRA)
    @JoinColumn(name = "COMMAND_DETAIL_ID", nullable = false)
    public CommandDetail getCommandDetail() {
        return commandDetail;
    }

    public void setCommandDetail(CommandDetail commandDetail) {
        this.commandDetail = commandDetail;
    }

	@Column(name = "ACTION_COMMAND_ID", nullable = false, precision = 20, scale = 0)
	public Long getActionCommandId() {
		return this.actionCommandId;
	}

	public void setActionCommandId(Long actionCommandId) {
		this.actionCommandId = actionCommandId;
	}

	@Column(name = "CMD_RUN", nullable = false, length = 500)
	public String getCmdRun() {
		return this.cmdRun;
	}

	public void setCmdRun(String cmdRun) {
		this.cmdRun = cmdRun;
	}

	@Column(name = "RESULT", length = 500)
	public String getResult() {
		return this.result;
	}

	public void setResult(String result) {
		this.result = result;
	}

	@Column(name = "RESULT_DETAIL")
	public String getResultDetail() {
		return this.resultDetail;
	}

	public void setResultDetail(String resultDetail) {
		this.resultDetail = resultDetail;
	}

	@Column(name = "RESULT_FINAL", precision = 1, scale = 0)
	public Long getResultFinal() {
		return this.resultFinal;
	}

	public void setResultFinal(Long resultFinal) {
		this.resultFinal = resultFinal;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "FINISH_TIME", length = 7)
	public Date getFinishTime() {
		return this.finishTime;
	}

	public void setFinishTime(Date finishTime) {
		this.finishTime = finishTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "INSERT_TIME", length = 7)
	public Date getInsertTime() {
		return this.insertTime;
	}

	public void setInsertTime(Date insertTime) {
		this.insertTime = insertTime;
	}

	@Column(name = "ORDER_RUN", precision = 5, scale = 0)
	public Long getOrderRun() {
		return this.orderRun;
	}

	public void setOrderRun(Long orderRun) {
		this.orderRun = orderRun;
	}

        @Column(name = "CLONE_NUMBER", precision = 5, scale = 0)
        public Long getCloneNumber() {
            return cloneNumber;
        }

        public void setCloneNumber(Long cloneNumber) {
            this.cloneNumber = cloneNumber;
        }
        
        @Transient
        public FlowRunLogAction getFlowRunLogAction() {
			return flowRunLogAction;
		}

    public void setFlowRunLogAction(FlowRunLogAction flowRunLogAction) {
        this.flowRunLogAction = flowRunLogAction;
    }

    public FlowRunLogCommand(FlowRunLogCommand flowRunLogCmd, FlowRunLogAction flowRunLogAction) {

        this.flowRunLogAction = flowRunLogAction;

        this.actionCommandId = flowRunLogCmd.getActionCommandId();
        this.actionName = flowRunLogCmd.getActionName();
        this.cloneNumber = flowRunLogCmd.getCloneNumber();
        this.cmdRun = flowRunLogCmd.getCmdRun();
        this.commandDetail = flowRunLogCmd.getCommandDetail();
        this.finishTime = flowRunLogCmd.getFinishTime();
        this.insertTime = flowRunLogCmd.getInsertTime();
        this.nodeId = flowRunLogCmd.getNodeId();
        this.orderRun = flowRunLogCmd.getOrderRun();
        this.result = flowRunLogCmd.getResult();
        this.resultDetail = flowRunLogCmd.getResultDetail();
        this.resultFinal = flowRunLogCmd.getResultFinal();
        this.runLogActionId = flowRunLogCmd.getRunLogActionId();
        this.runLogCommandId = flowRunLogCmd.getRunLogCommandId();
    }


		public static void main(String[] args) {
            try {
                String hql = "select count(*) as totalCmd from FlowRunLogCommand as flowRunLogCmd"
                        + " left join FlowRunLogAction as flowRunLogAction on flowRunLogAction.runLogActionId = flowRunLogCmd.runLogActionId"
                        + " where flowRunLogAction.flowRunLogId = ? and flowRunLogAction.runLogActionId = ?";
                List<?> a = new FlowRunLogCommandServiceImpl().findList(hql, -1, -1, 12217l);
                System.out.println((Long) a.get(0));
            } catch (Exception e) {
//                e.printStackTrace();
				logger.error(e.getMessage(), e);
            }
        }

}
