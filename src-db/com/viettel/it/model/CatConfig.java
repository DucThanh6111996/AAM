package com.viettel.it.model;

// Generated Sep 8, 2016 5:07:30 PM by Hibernate Tools 4.0.0

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.faces.context.FacesContext;
import javax.persistence.*;
import java.util.Date;

/**
 * Action generated by hbm2java
 */
@Entity
@Table(name = "CAT_CONFIG")
public class CatConfig implements java.io.Serializable {

    protected final Logger LOGGER = LoggerFactory.getLogger(getClass());

    private CatConfigId id;
    private String propertyValue;
    private Date createdTime;
    private Date updatedTime;
    private String note;
    private String mapValue;
    private String labelVN;
    private String labelEN;
    private Long isActive;
    private Long cfgOrder;
    private String labelLang;

    public CatConfig() {
    }

    @AttributeOverrides({
            @AttributeOverride(name = "configGroup", column =
            @Column(name = "CONFIG_GROUP", nullable = false, length = 50)),
            @AttributeOverride(name = "key", column =
            @Column(name = "PROPERTY_KEY", nullable = false, length = 50))})
    @EmbeddedId
    public CatConfigId getId() {
        return id;
    }

    public void setId(CatConfigId id) {
        this.id = id;
    }

    @Column(name = "PROPERTY_VALUE", length = 50)
    public String getPropertyValue() {
        return propertyValue;
    }

    public void setPropertyValue(String propertyValue) {
        this.propertyValue = propertyValue;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATE_DATE", length = 7)
    public Date getCreatedTime() {
        return createdTime;
    }

    public void setCreatedTime(Date createdTime) {
        this.createdTime = createdTime;
    }


    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "UPDATE_TIME", length = 7)
    public Date getUpdatedTime() {
        return updatedTime;
    }

    public void setUpdatedTime(Date updatedTime) {
        this.updatedTime = updatedTime;
    }

    @Column(name = "NOTE", length = 4000)
    public String getNote() {
        return note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    @Column(name = "MAP_VALUE", length = 50)
    public String getMapValue() {
        return mapValue;
    }

    public void setMapValue(String mapValue) {
        this.mapValue = mapValue;
    }

    @Column(name = "LABEL_VN", length = 200)
    public String getLabelVN() {
        return labelVN;
    }

    public void setLabelVN(String labelVN) {
        this.labelVN = labelVN;
    }

    @Column(name = "LABEL_EN", length = 200)
    public String getLabelEN() {
        return labelEN;
    }

    public void setLabelEN(String labelEN) {
        this.labelEN = labelEN;
    }

    @Column(name = "IS_ACTIVE", nullable = false, precision = 1, scale = 0)
    public Long getIsActive() {
        return isActive;
    }

    public void setIsActive(Long isActive) {
        this.isActive = isActive;
    }

    @Column(name = "CFG_ORDER")
    public Long getCfgOrder() {
        return cfgOrder;
    }

    public void setCfgOrder(Long cfgOrder) {
        this.cfgOrder = cfgOrder;
    }

    @Transient
    public String getLabelLang() {
        String lang = FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage();
        if (lang != null && lang.equalsIgnoreCase("vi")) {
            this.labelLang = this.labelVN;
        } else {
            this.labelLang = this.labelEN;
        }
        return labelLang;
    }

    public void setLabelLang(String labelLang) {
        this.labelLang = labelLang;
    }


    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        CatConfigId other = (CatConfigId) obj;
        if (id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        return true;
    }

}
