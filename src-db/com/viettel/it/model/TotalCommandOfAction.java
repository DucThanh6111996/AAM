package com.viettel.it.model;

// Generated Sep 27, 2016 11:33:18 AM by Hibernate Tools 4.0.0

import com.viettel.it.persistence.FlowRunLogActionServiceImpl;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.persistence.*;
import java.util.List;

import static javax.persistence.GenerationType.SEQUENCE;

/**
 * FlowRunLogAction generated by hbm2java
 */
@Entity
@Table(name = "TOTAL_COMMAND_OF_ACTION")
public class TotalCommandOfAction implements java.io.Serializable {
	private static Logger logger = LogManager.getLogger(TotalCommandOfAction.class);

	private Long id;
	private Long flowRunId;
	private Long actionOfFlowId;
	private Integer totalCommandRun;
	
	public TotalCommandOfAction() {
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 20, scale = 0)
	@GeneratedValue(strategy = SEQUENCE, generator = "generator")
    @SequenceGenerator(name = "generator", sequenceName = "TOTAL_COMMAND_OF_ACTION_SEQ", allocationSize = 1)
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

    @Column(name = "ACTION_OF_FLOW_ID", precision = 20, scale = 0)
	public Long getActionOfFlowId() {
		return this.actionOfFlowId;
   }
        
   public void setActionOfFlowId(Long actionOfFlowId) {
	   this.actionOfFlowId = actionOfFlowId;
   }

   @Column(name = "TOTAL_COMMAND_RUN", precision = 20, scale = 0)
   public Integer getTotalCommandRun() {
	   return totalCommandRun;
   }

   public void setTotalCommandRun(Integer totalCommandRun) {
	   this.totalCommandRun = totalCommandRun;
   }

   @Column(name = "FLOW_RUN_ID", precision = 20, scale = 0)
	public Long getFlowRunId() {
		return flowRunId;
	}
	
	public void setFlowRunId(Long flowRunId) {
		this.flowRunId = flowRunId;
	}
	
	public TotalCommandOfAction(TotalCommandOfAction totalCmdOfAction) {
		this.actionOfFlowId = totalCmdOfAction.getActionOfFlowId();
		this.flowRunId = totalCmdOfAction.getFlowRunId();
		this.id = totalCmdOfAction.getId();
		this.totalCommandRun = totalCmdOfAction.getTotalCommandRun();
	}
    
	public static void main(String[] args) {
		try {
			String hql = "select new TotalCommandOfAction(totalCmdOfAction) from TotalCommandOfAction as totalCmdOfAction"
		            + " left join ActionOfFlow as actionOfFlow on flowRunLogAction.actionOfFlowId = actionOfFlow.stepNum"
		            + " left join Node as node on flowRunLogAction.nodeId = node.nodeId"
		            + " where flowRunLogAction.type = 1 and flowRunLogAction.flowRunLogId = ?"
		            + " order by node.nodeId, actionOfFlow.stepNumberLabel, flowRunLogAction.cloneNumber";
		    List<FlowRunLogAction> a = new FlowRunLogActionServiceImpl().findList(hql, -1, -1, 122974l);
		    System.out.println(a.size());
		} catch (Exception e) {
//			e.printStackTrace();
			logger.error(e.getMessage(), e);
		}
	}
	
}
