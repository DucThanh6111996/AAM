package com.viettel.it.model;

// Generated Sep 8, 2016 5:07:30 PM by Hibernate Tools 4.0.0

import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.viettel.it.util.Config;
import com.viettel.it.util.EvalUtil;
import com.viettel.it.util.MessageUtil;
import net.objecthunter.exp4j.Expression;
import net.objecthunter.exp4j.ExpressionBuilder;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.slf4j.Logger;

import javax.persistence.*;
import java.text.SimpleDateFormat;
import java.util.*;

import static javax.persistence.GenerationType.SEQUENCE;

/**
 * CommandDetail generated by hbm2java
 */
@Entity
@Table(name = "COMMAND_DETAIL")
public class CommandDetail implements java.io.Serializable {

    private Long commandDetailId;
    private Vendor vendor;
    private NodeType nodeType;
    private CommandTelnetParser commandTelnetParser;
    private String protocol;
    private String standardValue;
    private Long isActive;
    private String userName;
    private Date createTime;
    private List<ParamInput> paramInputs = new ArrayList<ParamInput>();
    private List<ActionCommand> actionCommands = new ArrayList<ActionCommand>();
    private String commandName;
    private String description;
    private String expectedResult;
    private String operator;
    private String wsUrl;
    private String wsTargetname;
    
    private String resultImport;
    private String resultImportDetail;
    private String createTimeStr;
    private Version version;
    private Long commandType;
    private String commandTypeStr;
    private Long commandClassify; // impact database or impact it business command

    private Long cmdLogOrderRun;

    private String dataTest = "aaaaaaaaaabb";


    @Transient
    public String getCommandTypeStr() {
        commandTypeStr = "";
        if (commandType != null) {
            if (commandType == 0) {
                commandTypeStr = MessageUtil.getResourceBundleMessage("label.command.type.impact");
            } else if (commandType == 1) {
                commandTypeStr = MessageUtil.getResourceBundleMessage("label.command.type.view");
            } else if (commandType == 2) {
            	commandTypeStr = MessageUtil.getResourceBundleMessage("label.command.type.checklist");
            }
        }
        return commandTypeStr;
    }

    public void setCommandTypeStr(String commandTypeStr) {
        this.commandTypeStr = commandTypeStr;
    }

    public CommandDetail() {
        commandTelnetParser = new CommandTelnetParser();
        nodeType = new NodeType();
        vendor = new Vendor();
        version = new Version();
    }

//	public CommandDetail(Long commandDetailId, Vendor vendor, NodeType nodeType, String protocol, Long isActive, String userName, Date createTime) {
//		this.commandDetailId = commandDetailId;
//		this.vendor = vendor;
//		this.nodeType = nodeType;
//		this.protocol = protocol;
//		this.isActive = isActive;
//		this.userName = userName;
//		this.createTime = createTime;
//	}
//
//	public CommandDetail(Long commandDetailId, Vendor vendor, NodeType nodeType, CommandTelnetParser commandTelnetParser, String protocol, String standardValue, Long isActive, String userName,
//			Date createTime, List<ParamInput> paramInputs, List<ActionCommand> actionCommands) {
//		this.commandDetailId = commandDetailId;
//		this.vendor = vendor;
//		this.nodeType = nodeType;
//		this.commandTelnetParser = commandTelnetParser;
//		this.protocol = protocol;
//		this.standardValue = standardValue;
//		this.isActive = isActive;
//		this.userName = userName;
//		this.createTime = createTime;
//		this.paramInputs = paramInputs;
//		this.actionCommands = actionCommands;
//	}

    @Transient
    public String getResultImport() {
        return resultImport;
    }

    public void setResultImport(String resultImport) {
        this.resultImport = resultImport;
    }

    @Transient
    public String getResultImportDetail() {
        return resultImportDetail;
    }

    @Column(name = "TYPE", nullable = false, precision = 1, scale = 0)
    public Long getCommandType() {
        return commandType;
    }

    public void setCommandType(Long commandType) {
        this.commandType = commandType;
    }
    
    @Fetch(FetchMode.SELECT)
	@ManyToOne(fetch = FetchType.EAGER)
	@LazyCollection(LazyCollectionOption.EXTRA)
	@JoinColumn(name = "VENDOR_ID", nullable = false)
	public Vendor getVendor() {
		return this.vendor;
	}

    public void setResultImportDetail(String resultImportDetail) {
        this.resultImportDetail = resultImportDetail;
    }
    
    @Transient
    public String getCreateTimeStr() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        createTimeStr = sdf.format(this.createTime);
        return createTimeStr;
    }

	@ManyToOne(fetch = FetchType.EAGER)
	@LazyCollection(LazyCollectionOption.EXTRA)
	@JoinColumn(name = "NODE_TYPE_ID", nullable = false)
	public NodeType getNodeType() {
		return this.nodeType;
	}
    public void setCreateTimeStr(String createTimeStr) {
        this.createTimeStr = createTimeStr;
    }

    @Id
    @Column(name = "COMMAND_DETAIL_ID", unique = true, nullable = false, precision = 10, scale = 0)
    @GeneratedValue(strategy = SEQUENCE, generator = "generator")
    @SequenceGenerator(name = "generator", sequenceName = "COMMAND_DETAIL_seq", allocationSize = 1)
    public Long getCommandDetailId() {
        return this.commandDetailId;
    }

    public void setCommandDetailId(Long commandDetailId) {
        this.commandDetailId = commandDetailId;
    }
    
	@ManyToOne(fetch = FetchType.EAGER)
	@LazyCollection(LazyCollectionOption.EXTRA)
	@JoinColumn(name = "PARSER_ID")
	public CommandTelnetParser getCommandTelnetParser() {
		return this.commandTelnetParser;
	}


    public void setCommandTelnetParser(CommandTelnetParser commandTelnetParser) {
        this.commandTelnetParser = commandTelnetParser;
    }

    @Column(name = "PROTOCOL", nullable = false, length = 50)
    public String getProtocol() {
        return this.protocol;
    }

    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    @Column(name = "STANDARD_VALUE", length = 500)
    public String getStandardValue() {
        return this.standardValue;
    }

    public void setStandardValue(String standardValue) {
        this.standardValue = standardValue;
    }

    @Column(name = "IS_ACTIVE", nullable = false, precision = 1, scale = 0)
    public Long getIsActive() {
        return this.isActive;
    }

    @Fetch(FetchMode.SELECT)
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "commandDetail")
	@LazyCollection(LazyCollectionOption.EXTRA)
	public List<ParamInput> getParamInputs() {
		return this.paramInputs;
	}
    public void setIsActive(Long isActive) {
        this.isActive = isActive;
    }

    @Column(name = "USER_NAME", nullable = false, length = 200)
    public String getUserName() {
        return this.userName;
    }

    @Fetch(FetchMode.SELECT)
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "commandDetail")
	@LazyCollection(LazyCollectionOption.EXTRA)
	public List<ActionCommand> getActionCommands() {
		return this.actionCommands;
	}
    public void setUserName(String userName) {
        this.userName = userName;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATE_TIME", nullable = false, length = 7)
    public Date getCreateTime() {
        return this.createTime;
    }

    @Column(name = "COMMAND_NAME", nullable = false, length = 1000)
    public String getCommandName() {
        return commandName;
    }

    public void setCommandName(String commandName) {
        this.commandName = commandName;
    }

    @Column(name = "DESCRIPTION", nullable = true, length = 1000)
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "EXPECTED_RESULT", nullable = true)
    public String getExpectedResult() {
        return expectedResult;
    }

    public void setExpectedResult(String expectedResult) {
        this.expectedResult = expectedResult;
    }

    @Fetch(FetchMode.SELECT)
    @ManyToOne(fetch = FetchType.EAGER)
    @LazyCollection(LazyCollectionOption.EXTRA)
    @JoinColumn(name = "VERSION_ID", nullable = false)
    public Version getVersion() {
        return version;
    }

    public void setVersion(Version version) {
        this.version = version;
    }

    @Column(name = "OPERATOR", nullable = false, length = 50)
    public String getOperator() {
        return operator;
    }

    public void setOperator(String operator) {
        this.operator = operator;
    }

    @Column(name = "COMMAND_CLASSIFY", precision = 10, scale = 0)
    public Long getCommandClassify() {
        return commandClassify;
    }

    public void setCommandClassify(Long commandClassify) {
        this.commandClassify = commandClassify;
    }

    public String buildCommand(List<ParamValue> paramValues, boolean isStyle){
    	return buildCommand(paramValues, isStyle,null);
    }
    
	public String buildCommand(List<ParamValue> paramValues, boolean isStyle, ActionOfFlow actionOfFlow){
		String rs = null;
		if(rs ==null)
			rs = commandTelnetParser.getCmd();
		for(ParamInput paramInput : paramInputs){
			for (ParamValue paramValue : paramValues) {
				if(paramInput.getParamInputId().equals(paramValue.getParamInput().getParamInputId())){
					String paramValue2 = paramValue.getParamValue();
				
					if(paramValue2!=null){
						if(actionOfFlow.getIndexParamValue()==null)
							actionOfFlow.setIndexParamValue(0);
						if(actionOfFlow!=null && actionOfFlow.getIndexParamValue()!=null){
							String[] split = paramValue2.split(Config.SPLITTER_VALUE, -1);
							int index = Math.min(split.length-1, actionOfFlow.getIndexParamValue());
							paramValue2 = split[index];
							int pri = 1;
							if(split.length>1)
								while(paramValue2.isEmpty())
									paramValue2 = split[Math.max(0, index-(pri++))];
						}
						if(!paramValue2.isEmpty()) {
                            paramValue2 = StringEscapeUtils.escapeHtml(paramValue2);
                            if (isStyle)
                                rs = rs.replace("@{" + paramInput.getParamCode() + "}", "<b style=\"background: " + paramValue.getParamInput().getColor() + "\">" + paramValue2 + "</b>");
                            else
                                rs = rs.replace("@{" + paramInput.getParamCode() + "}", paramValue2);
                        }
					}
				}
			}
		}
//		System.err.println(rs);
		return rs;
	}

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

	public void setNodeType(NodeType nodeType) {
		this.nodeType = nodeType;
	}

	public void setVendor(Vendor vendor) {
		this.vendor = vendor;
	}

	public void setActionCommands(List<ActionCommand> actionCommands) {
		this.actionCommands = actionCommands;
	}

	public void setParamInputs(List<ParamInput> paramInputs) {
		this.paramInputs = paramInputs;
	}

	// hanhnv68 add 20160913
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((commandDetailId == null) ? 0 : commandDetailId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CommandDetail other = (CommandDetail) obj;
		if (commandDetailId == null) {
			if (other.commandDetailId != null)
				return false;
		} else if (!commandDetailId.equals(other.commandDetailId))
			return false;
		return true;
	}
	// end hanhnv68 add 20160913

	@Transient
	public String getDataTest() {
		return dataTest;
	}

	public void setDataTest(String dataTest) {
		this.dataTest = dataTest;
	}

    @Column(name = "WS_URL", length = 200)
    public String getWsUrl() {
        return wsUrl;
    }

    public void setWsUrl(String wsUrl) {
        this.wsUrl = wsUrl;
    }

    @Column(name = "WS_TARGETNAME", length = 200)
    public String getWsTargetname() {
        return wsTargetname;
    }

    public void setWsTargetname(String wsTargetname) {
        this.wsTargetname = wsTargetname;
    }

    @Transient
    public Long getCmdLogOrderRun() {
        return cmdLogOrderRun;
    }

    public void setCmdLogOrderRun(Long cmdLogOrderRun) {
        this.cmdLogOrderRun = cmdLogOrderRun;
    }

    @Override
    public String toString() {
        return "CommandDetail{" +
                "commandDetailId=" + commandDetailId +
                ", protocol='" + protocol + '\'' +
                ", standardValue='" + standardValue + '\'' +
                ", isActive=" + isActive +
                ", userName='" + userName + '\'' +
                ", createTime=" + createTime +
                ", commandName='" + commandName + '\'' +
                ", description='" + description + '\'' +
                ", expectedResult='" + expectedResult + '\'' +
                ", operator='" + operator + '\'' +
                ", wsUrl='" + wsUrl + '\'' +
                ", wsTargetname='" + wsTargetname + '\'' +
                ", resultImport='" + resultImport + '\'' +
                ", resultImportDetail='" + resultImportDetail + '\'' +
                ", createTimeStr='" + createTimeStr + '\'' +
                ", commandType=" + commandType +
                ", commandTypeStr='" + commandTypeStr + '\'' +
                ", commandClassify=" + commandClassify +
                ", cmdLogOrderRun=" + cmdLogOrderRun +
                '}';
    }

    public void calculateParam(List<ParamValue> paramValues, Logger logger) {
        // Tinh toan cac tham so cua lenh theo cong thuc duoc cau hinh
        Map<String, String> mapValue = new HashMap<>();
        for (ParamInput paramInput : paramInputs) {
            for (ParamValue paramValue : paramValues) {
                if (paramInput.getParamInputId().equals(paramValue.getParamInput().getParamInputId())) {
                    if (paramValue.getParamValue() != null && !paramValue.getParamValue().trim().isEmpty()) {
                        mapValue.put(paramInput.getParamCode(), paramValue.getParamValue());
                    }
                    if (!paramValue.isIsFormula()) {
                        paramInput.setParamValue(paramValue.getParamValue());
                    } else {
                        paramInput.setParamValue(null);
                    }
                    break;
                }
            }
        }
        for (ParamInput paramInput : paramInputs) {
            if (paramInput.getParamFormula() != null && !paramInput.getParamFormula().trim().isEmpty()
                    && (paramInput.getParamValue() == null || paramInput.getParamValue().trim().isEmpty())) {
                if (paramInput.getParamFormula().contains("-->")) {
                    List<String> array = getParamList(paramInput.getParamFormula());

                    Map<String, String> mapVar = new HashMap<>();
                    for (String str : array) {
                        if (mapValue.containsKey(str)) {
                            mapVar.put(str, mapValue.get(str) == null ? "" : mapValue.get(str).trim());
                        }
                    }
                    List<String> lstValues = getIfValue(paramInput.getParamFormula(), mapVar, logger);
                    if (!lstValues.isEmpty()) {
                        String vl = StringUtils.join(lstValues, ";");
                        mapValue.put(paramInput.getParamCode(), vl);

                        for (ParamValue paramValue : paramValues) {
                            if (((paramValue.getParamInput().getParamFormula() == null || paramValue.getParamInput().getParamFormula().trim().isEmpty())
                                    && paramValue.getParamInput().getParamCode().equals(paramInput.getParamCode()))
                                    || paramValue.getParamInput().getParamInputId().equals(paramInput.getParamInputId())) {
                                paramValue.setParamValue(vl);
                            }
                        }
                    } else {
                        mapValue.put(paramInput.getParamCode(), null);

                        for (ParamValue paramValue : paramValues) {
                            if (((paramValue.getParamInput().getParamFormula() == null || paramValue.getParamInput().getParamFormula().trim().isEmpty())
                                    && paramValue.getParamInput().getParamCode().equals(paramInput.getParamCode()))
                                    || paramValue.getParamInput().getParamInputId().equals(paramInput.getParamInputId())) {
                                paramValue.setParamValue(null);
                            }
                        }
                    }
                } else {
                    List<String> array = getParamList(paramInput.getParamFormula());

                    Map<String, String> mapVar = new HashMap<>();
                    for (String str : array) {
                        if (mapValue.containsKey(str)) {
                            mapVar.put(str, mapValue.get(str) == null ? "" : mapValue.get(str).trim());
                        }
                    }
                    List<Long> lstValues = getExpressValue(paramInput.getParamFormula(), mapVar, logger);
                    if (!lstValues.isEmpty()) {
                        String vl = StringUtils.join(lstValues, ";");
                        mapValue.put(paramInput.getParamCode(), vl);

                        for (ParamValue paramValue : paramValues) {
                            if (((paramValue.getParamInput().getParamFormula() == null || paramValue.getParamInput().getParamFormula().trim().isEmpty())
                                    && paramValue.getParamInput().getParamCode().equals(paramInput.getParamCode()))
                                    || paramValue.getParamInput().getParamInputId().equals(paramInput.getParamInputId())) {
                                paramValue.setParamValue(vl);
                            }
                        }
                    } else {
                        mapValue.put(paramInput.getParamCode(), null);

                        for (ParamValue paramValue : paramValues) {
                            if (((paramValue.getParamInput().getParamFormula() == null || paramValue.getParamInput().getParamFormula().trim().isEmpty())
                                    && paramValue.getParamInput().getParamCode().equals(paramInput.getParamCode()))
                                    || paramValue.getParamInput().getParamInputId().equals(paramInput.getParamInputId())) {
                                paramValue.setParamValue(null);
                            }
                        }
                    }
                }
            }
        }
    }

    private List<String> getParamList(String commandPattern) {
        List<String> lstParam = new ArrayList<>();

        if (commandPattern != null && !commandPattern.trim().isEmpty() && commandPattern.contains("@{")) {
            int preIndex = 0;
            while (true) {
                preIndex = commandPattern.indexOf("@{", preIndex);

                if (preIndex < 0) {
                    break;
                } else {
                    preIndex += 2;
                }

                int endIndex = commandPattern.indexOf("}", preIndex);

                if (endIndex < 0) {
                    break;
                } else {
                    lstParam.add(commandPattern.substring(preIndex, endIndex));
                    preIndex = endIndex;
                }
            }
        }

        return lstParam;
    }

    private List<String> getIfValue(String expressStr, Map<String, String> mapVar, Logger logger) {
        List<String> lstValue = new ArrayList<>();
        try {
            int maxNumber = 1;
            for (String value : mapVar.values()) {
                maxNumber = maxNumber > value.split(";").length ? maxNumber : value.split(";").length;
            }
            for (int i = 0; i < maxNumber; i++) {
                //try {
                Map<String, String> mapVarD = new HashMap<>();
                for (String code : mapVar.keySet()) {
                    String vl = mapVar.get(code);
                    String[] arr = vl.split(";");
                    if (arr.length > 0) {
                        if (i <= arr.length - 1) {
                            mapVarD.put(code, arr[i]);
                        } else {
                            mapVarD.put(code, arr[arr.length - 1]);
                        }
                    }
                }

                String[] ifConditions = expressStr.split(";");
                String value = null;
                boolean paramEnough = true;
                for (String condition : ifConditions) {
                    //try {
                    if (condition.contains("-->")) {
                        String[] arr = condition.split("-->");
                        if (arr != null && arr.length == 2) {
                            String ifBody = arr[0].trim();
                            String ifThen = arr[1].trim();

                            for (String var : mapVarD.keySet()) {
                                ifBody = ifBody.replace("@{" + var + "}", mapVarD.get(var));
                                ifThen = ifThen.replace("@{" + var + "}", mapVarD.get(var));
                            }

//                            ScriptEngineManager factory = new ScriptEngineManager();
//                            ScriptEngine engine = factory.getEngineByName("JavaScript");
                            if (!ifBody.contains("@{")) {
                                Boolean ifValue = Boolean.parseBoolean((new EvalUtil()).evalScript(ifBody));
                                if (ifValue) {
                                    value = (new EvalUtil()).evalScript(ifThen).replaceAll("\\.0+$", "");
                                    break;
                                }
                            } else {
                                paramEnough = false;
                            }
                        }
                    }
//                        } catch (Exception ex) {
//                            logger.error(ex.getMessage(), ex);
//                        }
                }

                if (value == null && paramEnough) {
                    for (String condition : ifConditions) {
                        if (condition.toLowerCase().contains("else") && !condition.contains("-->")) {
                            for (String var : mapVarD.keySet()) {
                                condition = condition.replace("@{" + var + "}", mapVarD.get(var));
                            }
                            value = condition.replace("else", "").trim();
                            break;
                        }
                    }
                }
                lstValue.add(value);
//                } catch (Exception ex) {
//                    return lstValue;
//                }
            }
            return lstValue;
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            return new ArrayList<>();
        }
    }

    private List<Long> getExpressValue(final String expressStr, Map<String, String> mapVar, Logger logger) {

        List<Long> lstValue = new ArrayList<>();
        if (mapVar.isEmpty()) {
            return lstValue;
        }
        try {
            int maxNumber = 1;
            for (String value : mapVar.values()) {
                maxNumber = maxNumber > value.split(";").length ? maxNumber : value.split(";").length;
            }
            for (int i = 0; i < maxNumber; i++) {
                String expressStrLocal = expressStr;
                //try {
                Map<String, Double> mapVarD = new HashMap<>();
                for (String code : mapVar.keySet()) {
                    String vl = mapVar.get(code);
                    String[] arr = vl.split(";");
                    if (i <= arr.length - 1) {
                        mapVarD.put(code, Double.parseDouble(arr[i]));
                    } else {
                        mapVarD.put(code, Double.parseDouble(arr[arr.length - 1]));
                    }
                }

                for (String var : mapVarD.keySet()) {
                    expressStrLocal = expressStrLocal.replace("@{" + var + "}", String.valueOf(mapVarD.get(var)));
                }

                Expression e = new ExpressionBuilder(expressStrLocal).build();

                lstValue.add((long) e.evaluate());
//                } catch (Exception ex) {
//                    return lstValue;
//                }
            }
            return lstValue;
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            return new ArrayList<>();
        }
    }
}
