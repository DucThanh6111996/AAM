package com.viettel.it.model;

// Generated Sep 8, 2016 5:07:30 PM by Hibernate Tools 4.0.0

import com.viettel.it.persistence.FlowRunActionServiceImpl;
import com.viettel.it.util.Config;
import com.viettel.model.CatCountryBO;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.primefaces.model.UploadedFile;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static javax.persistence.GenerationType.SEQUENCE;

/**
 * FlowRunAction generated by hbm2java
 */
@Entity
@Table(name = "FLOW_RUN_ACTION")
public class FlowRunAction implements java.io.Serializable {
    private static Logger logger = LogManager.getLogger(FlowRunAction.class);

    private Long flowRunId;
    private FlowTemplates flowTemplates;
    private Date timeRun;
    //	private List<ParamValue> paramValues = new ArrayList<ParamValue>(0);
    private List<NodeRun> nodeRuns = new ArrayList<NodeRun>(0);

    private String flowRunName;
    private Date createDate;
    private String createBy;
    private Long status = 0L;
    private String executeBy;
    private Date timeRunActual;
    private Date endRun;
    private String crNumber;
    private Long crStatus;
    private String logFilePath;
    private String approveBy;
    private String fileNameImportDt;
    private UploadedFile fileImportDT;
    private String dtFilePath;
    private Integer executeType; // 0 -> Qua voffice; i -> Qua GNOC
    private byte[] fileContent;
    private byte[] logFileContent;
    private String requestId;
    private String securityParamInput;
    //20180328_quytv7_them loai he thong duoc cap nhat ket qua sau khi chay mop xong, 0: khong he thong nao; 1: CR_GNOC, 2: TT_GNOC
    private Integer systemUpdateResult;

    private Long serviceActionId;
    private String flowRunCode;
    //20181119_tudn_start them danh sach lenh blacklist
    private Long mopType = 0l;
    //20181119_tudn_end them danh sach lenh blacklist

    //thenv_20180615_Start
    private CatCountryBO countryCode;
    //20190312_Quytv7_Them loai chay DT: 0: chay manual; 1: Chay auto
    private Long runAuto;

    //20190826_tudn_start lap lich tac dong tu dong
    private Long typeConfirmGNOC;
    private Long typeRunGNOC;
    private String crLinkGNOC;
    private Long cfStatusNocpro;
    //20190826_tudn_end lap lich tac dong tu dong


    @Column(name = "RUN_AUTO")
    public Long getRunAuto() {
        return runAuto;
    }

    public void setRunAuto(Long runAuto) {
        this.runAuto = runAuto;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @LazyCollection(LazyCollectionOption.EXTRA)
    @JoinColumn(name = "COUNTRY_CODE")
    public CatCountryBO getCountryCode() {
        return this.countryCode;
    }

    public void setCountryCode(CatCountryBO countryCode) {
        this.countryCode = countryCode;
    }
    //thenv_20180615_End

    @Column(name = "SYSTEM_UPDATE_RESULT")
    public Integer getSystemUpdateResult() {
        return systemUpdateResult;
    }

    public void setSystemUpdateResult(Integer systemUpdateResult) {
        this.systemUpdateResult = systemUpdateResult;
    }


    public FlowRunAction() {
    }

    public FlowRunAction(Long flowRunId, FlowTemplates flowTemplates, Date timeRun) {
        this.flowRunId = flowRunId;
        this.flowTemplates = flowTemplates;
        this.timeRun = timeRun;
    }

//	public FlowRunAction(Long flowRunId, FlowTemplates flowTemplates, Date timeRun, List<ParamValue> paramValues, List<NodeRun> nodeRuns) {
//		this.flowRunId = flowRunId;
//		this.flowTemplates = flowTemplates;
//		this.timeRun = timeRun;
//		this.paramValues = paramValues;
//		this.nodeRuns = nodeRuns;
//	}

    @Id
    @Column(name = "FLOW_RUN_ID", unique = true, nullable = false, precision = 22, scale = 0)
    @GeneratedValue(strategy = SEQUENCE, generator = "generator")
    @SequenceGenerator(name = "generator", sequenceName = "FLOW_RUN_ACTION_SEQ", allocationSize = 1)
    public Long getFlowRunId() {
        return this.flowRunId;
    }

    public void setFlowRunId(Long flowRunId) {
        this.flowRunId = flowRunId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "FLOW_TEMPLATES_ID", nullable = false)
    public FlowTemplates getFlowTemplates() {
        return this.flowTemplates;
    }

    public void setFlowTemplates(FlowTemplates flowTemplates) {
        this.flowTemplates = flowTemplates;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "TIME_RUN", nullable = false, length = 7)
    public Date getTimeRun() {
        return this.timeRun;
    }

    public void setTimeRun(Date timeRun) {
        this.timeRun = timeRun;
    }

//    @Fetch(FetchMode.SELECT)
//	@OneToMany(fetch = FetchType.EAGER, mappedBy = "flowRunAction", cascade=CascadeType.ALL )
//	@LazyCollection(LazyCollectionOption.EXTRA)
//	public List<ParamValue> getParamValues() {
//		return this.paramValues;
//	}
//
//    public void setParamValues(List<ParamValue> paramValues) {
//        this.paramValues = paramValues;
//    }

    @Fetch(FetchMode.SELECT)
    @OneToMany(fetch = FetchType.EAGER, mappedBy = "flowRunAction", cascade = CascadeType.ALL)
    @LazyCollection(LazyCollectionOption.EXTRA)
    public List<NodeRun> getNodeRuns() {
        return this.nodeRuns;
    }

    public void setNodeRuns(List<NodeRun> nodeRuns) {
        this.nodeRuns = nodeRuns;
    }

    @Column(name = "FLOW_RUN_NAME")
    public String getFlowRunName() {
        return flowRunName;
    }

    public void setFlowRunName(String flowRunName) {
        this.flowRunName = flowRunName;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATE_DATE", nullable = false, length = 7)
    public Date getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

    @Column(name = "CREATE_BY", nullable = false, length = 200)
    public String getCreateBy() {
        return this.createBy;
    }

    public void setCreateBy(String createBy) {
        this.createBy = createBy;
    }

    @Override
    @Transient
    public FlowRunAction clone() {
        FlowRunAction flowRunAction = new FlowRunAction();
        flowRunAction.setFlowTemplates(flowTemplates);
        flowRunAction.setFlowRunName(createFlowRunName(flowRunName));
        while (isExistFlowName(flowRunAction.getFlowRunName())) {
            flowRunAction.setFlowRunName(createFlowRunName(flowRunAction.getFlowRunName()));
        }
        flowRunAction.setCreateBy(createBy);
        flowRunAction.setCreateDate(new Date());
        flowRunAction.setFlowRunId(null);
        flowRunAction.setTimeRun(timeRun);
        flowRunAction.setCrNumber(Config.CR_DEFAULT);
        //tudn_start fix hien clone kich ban
        flowRunAction.setFileContent(fileContent);
        flowRunAction.setCountryCode(countryCode);
        flowRunAction.setExecuteType(executeType);
        //tudn_end fix hien clone kich ban
        //20181119_tudn_start them danh sach lenh blacklist
        flowRunAction.setMopType(mopType);
        //20181119_tudn_end them danh sach lenh blacklist
        return flowRunAction;
    }

    @Transient
    public static String createFlowRunName(String flowRunName) {
        Pattern pattern = Pattern.compile("_Copy\\(\\d{1,3}\\)$");
        Matcher matcher = pattern.matcher(flowRunName);
        if (matcher.find()) {
            String s = matcher.group();
            Pattern pattern2 = Pattern.compile("\\d{1,3}");
            Matcher matcher2 = pattern2.matcher(s);
            if (matcher2.find()) {
                String group = matcher2.group();
                String _flowRunAction = pattern.matcher(flowRunName).replaceAll("_Copy(" + (Integer.valueOf(group) + 1) + ")");
                return (_flowRunAction);
            } else {
                return (flowRunName + "_Copy(1)");
            }
        } else {
            return (flowRunName + "_Copy(1)");
        }
    }

    @Transient
    public static boolean isExistFlowName(String flowName) {
        try {
            List<?> list = new FlowRunActionServiceImpl().findList("select count(*) from FlowRunAction where flowRunName = ?", -1, -1, flowName);
            if (!"0".equals(list.get(0).toString()))
                return true;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
        return false;
    }

    @Column(name = "STATUS")
    public Long getStatus() {
        return status;
    }

    public void setStatus(Long status) {
        this.status = status;
    }


    @Column(name = "EXECUTE_BY", length = 200)
    public String getExecuteBy() {
        return this.executeBy;
    }

    public void setExecuteBy(String executeBy) {
        this.executeBy = executeBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "TIME_RUN_ACTUAL", length = 7)
    public Date getTimeRunActual() {
        return this.timeRunActual;
    }

    public void setTimeRunActual(Date timeRunActual) {
        this.timeRunActual = timeRunActual;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "END_RUN", length = 7)
    public Date getEndRun() {
        return this.endRun;
    }

    public void setEndRun(Date endRun) {
        this.endRun = endRun;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((flowRunId == null) ? 0 : flowRunId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        FlowRunAction other = (FlowRunAction) obj;
        if (flowRunId == null) {
            if (other.flowRunId != null)
                return false;
        } else if (!flowRunId.equals(other.flowRunId))
            return false;
        return true;
    }

    @Column(name = "CR_NUMBER")
    public String getCrNumber() {
        return crNumber;
    }

    public void setCrNumber(String crNumber) {
        this.crNumber = crNumber;
    }

    @Column(name = "LOG_FILE_PATH")
    public String getLogFilePath() {
        return logFilePath;
    }

    public void setLogFilePath(String logFilePath) {
        this.logFilePath = logFilePath;
    }

    @Transient
    public String getApproveBy() {
        return approveBy;
    }

    public void setApproveBy(String approveBy) {
        this.approveBy = approveBy;
    }

    @Column(name = "FILE_NAME_IMPORT_DT")
    public String getFileNameImportDt() {
        return fileNameImportDt;
    }

    public void setFileNameImportDt(String fileImportDt) {
        this.fileNameImportDt = fileImportDt;
    }

    @Transient
    public UploadedFile getFileImportDT() {
        return fileImportDT;
    }

    public void setFileImportDT(UploadedFile fileImportDT) {
        this.fileImportDT = fileImportDT;
    }


    @Column(name = "CR_STATUS")
    public Long getCrStatus() {
        return crStatus;
    }

    public void setCrStatus(Long crStatus) {
        this.crStatus = crStatus;
    }

    @Column(name = "DT_FILE_PATH")
    public String getDtFilePath() {
        return dtFilePath;
    }

    public void setDtFilePath(String dtFilePath) {
        this.dtFilePath = dtFilePath;
    }

    @Column(name = "EXECUTE_TYPE", precision = 8, scale = 0)
    public Integer getExecuteType() {
        return executeType;
    }

    public void setExecuteType(Integer executeType) {
        this.executeType = executeType;
    }

    @Column(name = "FILE_CONTENT")
    public byte[] getFileContent() {
        return fileContent;
    }

    public void setFileContent(byte[] fileContent) {
        this.fileContent = fileContent;
    }

    @Column(name = "LOG_FILE_CONTENT")
    public byte[] getLogFileContent() {
        return logFileContent;
    }

    public void setLogFileContent(byte[] logFileContent) {
        this.logFileContent = logFileContent;
    }

    @Column(name = "REQUEST_ID")
    public String getRequestId() {
        return requestId;
    }

    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    @Column(name = "SECURITY_PARAM_INPUT")
    public String getSecurityParamInput() {
        return securityParamInput;
    }

    public void setSecurityParamInput(String securityParamInput) {
        this.securityParamInput = securityParamInput;
    }

    @Column(name = "SERVICE_ACTION_ID")
    public Long getServiceActionId() {
        return serviceActionId;
    }

    public void setServiceActionId(Long serviceActionId) {
        this.serviceActionId = serviceActionId;
    }

    @Column(name = "FLOW_RUN_CODE")
    public String getFlowRunCode() {
        return flowRunCode;
    }

    public void setFlowRunCode(String flowRunCode) {
        this.flowRunCode = flowRunCode;
    }

    //20181119_tudn_start them danh sach lenh blacklist
    @Column(name = "MOP_TYPE")
    public Long getMopType() {
        return mopType;
    }

    public void setMopType(Long mopType) {
        this.mopType = mopType;
    }
    //20181119_tudn_end them danh sach lenh blacklist

    //20190524_tudn_start tac dong toan trinh SR GNOC
    private String systemCreateId;
    private String systemCreate;

    @Column(name = "SYSTEM_CREATE_ID")
    public String getSystemCreateId() {
        return systemCreateId;
    }

    public void setSystemCreateId(String systemCreateId) {
        this.systemCreateId = systemCreateId;
    }

    @Column(name = "SYSTEM_CREATE")
    public String getSystemCreate() {
        return systemCreate;
    }

    public void setSystemCreate(String systemCreate) {
        this.systemCreate = systemCreate;
    }
    //20190524_tudn_start tac dong toan trinh SR GNOC

    //20190826_tudn_start lap lich tac dong tu dong GNOC
    @Column(name = "TYPE_CONFIRM_GNOC")
    public Long getTypeConfirmGNOC() {
        return typeConfirmGNOC;
    }

    public void setTypeConfirmGNOC(Long typeConfirmGNOC) {
        this.typeConfirmGNOC = typeConfirmGNOC;
    }

    @Column(name = "TYPE_RUN_GNOC")
    public Long getTypeRunGNOC() {
        return typeRunGNOC;
    }

    public void setTypeRunGNOC(Long typeRunGNOC) {
        this.typeRunGNOC = typeRunGNOC;
    }

    @Column(name = "CR_LINK_GNOC")
    public String getCrLinkGNOC() {
        return crLinkGNOC;
    }

    public void setCrLinkGNOC(String crLinkGNOC) {
        this.crLinkGNOC = crLinkGNOC;
    }

    @Column(name = "CF_STATUS_NOCPRO")
    public Long getCfStatusNocpro() {
        return cfStatusNocpro;
    }

    public void setCfStatusNocpro(Long cfStatusNocpro) {
        this.cfStatusNocpro = cfStatusNocpro;
    }
    //20190826_tudn_end lap lich tac dong tu dong GNOC


    @Override
    public String toString() {
        return "FlowRunAction{" +
                "flowRunId=" + flowRunId +
                ", timeRun=" + timeRun +
                ", flowRunName='" + flowRunName + '\'' +
                ", createDate=" + createDate +
                ", createBy='" + createBy + '\'' +
                ", status=" + status +
                ", executeBy='" + executeBy + '\'' +
                ", timeRunActual=" + timeRunActual +
                ", endRun=" + endRun +
                ", crNumber='" + crNumber + '\'' +
                ", crStatus=" + crStatus +
                ", logFilePath='" + logFilePath + '\'' +
                ", approveBy='" + approveBy + '\'' +
                ", fileNameImportDt='" + fileNameImportDt + '\'' +
                ", dtFilePath='" + dtFilePath + '\'' +
                ", executeType=" + executeType + '\'' +
                ", serviceActionId=" + serviceActionId +
                '}';
    }
}
