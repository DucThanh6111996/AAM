package com.viettel.it.model;
// Generated Oct 19, 2016 10:14:35 AM by Hibernate Tools 4.0.0

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import javax.persistence.*;
import java.util.List;

import static javax.persistence.GenerationType.SEQUENCE;

/**
 * NodeActionOff generated by hbm2java
 */

/**
 * @author Nguyễn Xuân Huy <huynx6@viettel.com.vn>
 * @sin Oct 19, 2016
 * @version 1.0 
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "NODE_ACTION_OFF" )
public class NodeActionOff implements java.io.Serializable {

	private Long id;
	private ActionOfFlow actionOfFlow;
	private NodeType nodeType;
	private Long isMaster;
	private FlowTemplates flowTemplates;
	
	private List<ActionOfFlow> actionOfFlows;
	private Boolean declare = true;
	
	public NodeActionOff() {
	}

	public NodeActionOff(Long id) {
		this.id = id;
	}
	public NodeActionOff(Long id, ActionOfFlow actionOfFlow, NodeType nodeType, Long isMaster) {
		this.id = id;
		this.actionOfFlow = actionOfFlow;
		this.nodeType = nodeType;
		this.isMaster = isMaster;
	}
	

	public NodeActionOff(NodeType nodeType, Long isMaster) {
		super();
		this.nodeType = nodeType;
		this.isMaster = isMaster;
	}

	

	public NodeActionOff(NodeType nodeType, Long isMaster, FlowTemplates flowTemplates) {
		super();
		this.nodeType = nodeType;
		this.isMaster = isMaster;
		this.flowTemplates = flowTemplates;
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 22, scale = 0)
	@GeneratedValue(strategy = SEQUENCE, generator = "generator")
    @SequenceGenerator(name = "generator", sequenceName = "NODE_ACTION_OFF_SEQ", allocationSize = 1)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Fetch(FetchMode.SELECT)
	@ManyToOne( )
	@JoinColumn(name = "ACTION_OF_FLOW_ID")
	public ActionOfFlow getActionOfFlow() {
		return this.actionOfFlow;
	}

	public void setActionOfFlow(ActionOfFlow actionOfFlow) {
		this.actionOfFlow = actionOfFlow;
	}

	@ManyToOne( )
	@JoinColumn(name = "NODE_TYPE_ID")
	public NodeType getNodeType() {
		return this.nodeType;
	}

	public void setNodeType(NodeType nodeType) {
		this.nodeType = nodeType;
	}

	@Column(name = "IS_MASTER", precision = 22, scale = 0)
	public Long getIsMaster() {
		return this.isMaster;
	}

	public void setIsMaster(Long isMaster) {
		this.isMaster = isMaster;
	}
	
	@ManyToOne
	@JoinColumn(name = "FLOW_TEMPLATE_ID", nullable = false)
	public FlowTemplates getFlowTemplates() {
		return this.flowTemplates;
	}

    public void setFlowTemplates(FlowTemplates flowTemplates) {
        this.flowTemplates = flowTemplates;
    }

	

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((actionOfFlow == null) ? 0 : actionOfFlow.hashCode());
		result = prime * result + ((isMaster == null) ? 0 : isMaster.hashCode());
		result = prime * result + ((nodeType == null) ? 0 : nodeType.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		NodeActionOff other = (NodeActionOff) obj;
		if (actionOfFlow == null) {
			if (other.actionOfFlow != null)
				return false;
		} else if (!actionOfFlow.equals(other.actionOfFlow))
			return false;
		if (isMaster == null) {
			if (other.isMaster != null)
				return false;
		} else if (!isMaster.equals(other.isMaster))
			return false;
		if (nodeType == null) {
			if (other.nodeType != null)
				return false;
		} else if (!nodeType.equals(other.nodeType))
			return false;
		return true;
	}

	@Transient
	public List<ActionOfFlow> getActionOfFlows() {
		return actionOfFlows;
	}

	public void setActionOfFlows(List<ActionOfFlow> actionOfFlows) {
		this.actionOfFlows = actionOfFlows;
	}

	
	@Override
	public NodeActionOff clone(){
		NodeActionOff nodeActionOff = new NodeActionOff();
		nodeActionOff.setNodeType(nodeType);
		nodeActionOff.setIsMaster(isMaster);
		nodeActionOff.setFlowTemplates(flowTemplates);
		return nodeActionOff;
	}

	@Transient
	public Boolean getDeclare() {
		return declare;
	}

	public void setDeclare(Boolean declare) {
		this.declare = declare;
	}
	
}
